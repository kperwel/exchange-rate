// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render error state 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    Error
  </App>
</Provider>
`;

exports[`should render initial state 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    <MainLayout
      headerProvider={[Function]}
    >
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": true,
                "lastClassName": "ipDPMG",
                "rules": Array [
                  "
    display: flex;
    flex-direction: column;
    align-items: center;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-iwsKbI ipDPMG"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": true,
                      "lastClassName": "tUHnu",
                      "rules": Array [
                        "
    max-width: 620px;
    margin: 0 auto;
    width: 100%;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-dnqmqq tUHnu"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gZMcBi",
                            "isStatic": true,
                            "lastClassName": "cTGIgz",
                            "rules": Array [
                              "
    padding: 10px;
    margin: 10px;
    @media screen and (min-width: 500px) {
        padding: 20px;
        margin: 20px;
    }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gZMcBi",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gZMcBi cTGIgz"
                      >
                        <styled.p>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-VigVT",
                                  "isStatic": true,
                                  "lastClassName": "bjRZMr",
                                  "rules": Array [
                                    "
  color: #fff;
",
                                  ],
                                },
                                "displayName": "styled.p",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-VigVT",
                                "target": "p",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <p
                              className="sc-VigVT bjRZMr"
                            >
                              Your balance is 
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gqjmRU",
                                        "isStatic": true,
                                        "lastClassName": "kvcpxk",
                                        "rules": Array [
                                          "
  font-weight: bold;
  width: 30%;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gqjmRU",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-gqjmRU kvcpxk"
                                  >
                                    1000.00
                                  </span>
                                </StyledComponent>
                              </styled.span>
                               
                              EUR
                               and 
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-gqjmRU",
                                        "isStatic": true,
                                        "lastClassName": "kvcpxk",
                                        "rules": Array [
                                          "
  font-weight: bold;
  width: 30%;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-gqjmRU",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-gqjmRU kvcpxk"
                                  >
                                    200.00
                                  </span>
                                </StyledComponent>
                              </styled.span>
                               
                              PLN
                               .
                            </p>
                          </StyledComponent>
                        </styled.p>
                        <div>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-fjdhpX",
                                    "isStatic": true,
                                    "lastClassName": "lahujH",
                                    "rules": Array [
                                      "
  align-items: center;
  background: #fff;
  box-shadow: 0px 2px 7px 0px #002c9080;
  padding: 10px;
  display: flex;
  padding-right: 40px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-fjdhpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-fjdhpX lahujH"
                              >
                                <Flag
                                  currency="EUR"
                                  customRenderProvider={[Function]}
                                >
                                  <styled.img
                                    alt="eur"
                                    src="eur.png"
                                    title="Flag for eur"
                                  >
                                    <StyledComponent
                                      alt="eur"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jzJRlG",
                                            "isStatic": true,
                                            "lastClassName": "emstUE",
                                            "rules": Array [
                                              "
  height: 1em;
  margin: 5px;
",
                                            ],
                                          },
                                          "displayName": "styled.img",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-jzJRlG",
                                          "target": "img",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      src="eur.png"
                                      title="Flag for eur"
                                    >
                                      <img
                                        alt="eur"
                                        className="sc-jzJRlG emstUE"
                                        src="eur.png"
                                        title="Flag for eur"
                                      />
                                    </StyledComponent>
                                  </styled.img>
                                </Flag>
                                <CurrencyAwareMoneyInput
                                  currencyType="SOURCE"
                                >
                                  <MoneyInput
                                    onValueChange={[Function]}
                                    value="0.00"
                                  >
                                    <styled.input
                                      inputMode="numeric"
                                      onChange={[Function]}
                                      type="text"
                                      value="0.00"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-htpNat",
                                              "isStatic": true,
                                              "lastClassName": "gJNEJX",
                                              "rules": Array [
                                                "
  font-size: inherit;
  color: inherit;
  background: #FFFFFF33;
  border: 0;
  margin-left: 5px;
  margin-right: 5px;
  padding: 10px;
  flex: 1;
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-htpNat",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        inputMode="numeric"
                                        onChange={[Function]}
                                        type="text"
                                        value="0.00"
                                      >
                                        <input
                                          className="sc-htpNat gJNEJX"
                                          inputMode="numeric"
                                          onChange={[Function]}
                                          type="text"
                                          value="0.00"
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                  </MoneyInput>
                                </CurrencyAwareMoneyInput>
                                <CurrencySelector
                                  currencyType="SOURCE"
                                >
                                  <CurrencySelector
                                    currencies={
                                      Array [
                                        "PLN",
                                        "EUR",
                                      ]
                                    }
                                    currency="EUR"
                                    onChange={[Function]}
                                  >
                                    <styled.select
                                      onChange={[Function]}
                                      value="EUR"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bdVaJa",
                                              "isStatic": true,
                                              "lastClassName": "bwiEOO",
                                              "rules": Array [
                                                "
  font-size: inherit;
  color: inherit;
  background: #FFFFFF33;
  border: 0;
  margin-left: 5px;
  margin-right: 5px;
",
                                              ],
                                            },
                                            "displayName": "styled.select",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bdVaJa",
                                            "target": "select",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onChange={[Function]}
                                        value="EUR"
                                      >
                                        <select
                                          className="sc-bdVaJa bwiEOO"
                                          onChange={[Function]}
                                          value="EUR"
                                        >
                                          <option
                                            key="PLN"
                                            value="PLN"
                                          >
                                            PLN
                                          </option>
                                          <option
                                            key="EUR"
                                            value="EUR"
                                          >
                                            EUR
                                          </option>
                                        </select>
                                      </StyledComponent>
                                    </styled.select>
                                  </CurrencySelector>
                                </CurrencySelector>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jTzLTM",
                                    "isStatic": true,
                                    "lastClassName": "jZthzA",
                                    "rules": Array [
                                      "
  display: flex;
  align-content: flex-end;
  flex-direction: column;
  position: relative;
  line-height: 1em;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jTzLTM",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jTzLTM jZthzA"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cSHVUG",
                                          "isStatic": true,
                                          "lastClassName": "geFkiP",
                                          "rules": Array [
                                            "
  position: absolute;
  left: 50%;
  font-size: 0.8em;
  transform: translate(-50%, -50%);
  padding: 2px 4px;
  border: 1px solid #e6ebf5;
  background: #fff;
  white-space: nowrap;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cSHVUG",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-cSHVUG geFkiP"
                                    >
                                      1 
                                      EUR
                                       = 
                                      <TargetCurrencyPrice>
                                        4.2675
                                         
                                      </TargetCurrencyPrice>
                                      PLN
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <SwapButton>
                                  <styled.button
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bZQynM",
                                            "isStatic": true,
                                            "lastClassName": "kvHIii",
                                            "rules": Array [
                                              "
    width: 50px;
    height: 50px;
    padding: 0;
    border-radius: 50%;
    outline: 0;
    position: absolute;
    right: -25px;
    top: -25px;
    border: 1px solid #eee;

    &:active {
      border: 1px solid #ddd;
    }
",
                                            ],
                                          },
                                          "displayName": "styled.button",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bZQynM",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="sc-bZQynM kvHIii"
                                        onClick={[Function]}
                                      >
                                        <RefreshCw
                                          color="currentColor"
                                          size="24"
                                        >
                                          <svg
                                            fill="none"
                                            height="24"
                                            stroke="currentColor"
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth="2"
                                            viewBox="0 0 24 24"
                                            width="24"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <polyline
                                              points="23 4 23 10 17 10"
                                            />
                                            <polyline
                                              points="1 20 1 14 7 14"
                                            />
                                            <path
                                              d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"
                                            />
                                          </svg>
                                        </RefreshCw>
                                      </button>
                                    </StyledComponent>
                                  </styled.button>
                                </SwapButton>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-fjdhpX",
                                    "isStatic": true,
                                    "lastClassName": "lahujH",
                                    "rules": Array [
                                      "
  align-items: center;
  background: #fff;
  box-shadow: 0px 2px 7px 0px #002c9080;
  padding: 10px;
  display: flex;
  padding-right: 40px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-fjdhpX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-fjdhpX lahujH"
                              >
                                <Flag
                                  currency="PLN"
                                  customRenderProvider={[Function]}
                                >
                                  <styled.img
                                    alt="pln"
                                    src="pln.png"
                                    title="Flag for pln"
                                  >
                                    <StyledComponent
                                      alt="pln"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jzJRlG",
                                            "isStatic": true,
                                            "lastClassName": "emstUE",
                                            "rules": Array [
                                              "
  height: 1em;
  margin: 5px;
",
                                            ],
                                          },
                                          "displayName": "styled.img",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-jzJRlG",
                                          "target": "img",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      src="pln.png"
                                      title="Flag for pln"
                                    >
                                      <img
                                        alt="pln"
                                        className="sc-jzJRlG emstUE"
                                        src="pln.png"
                                        title="Flag for pln"
                                      />
                                    </StyledComponent>
                                  </styled.img>
                                </Flag>
                                <CurrencyAwareMoneyInput
                                  currencyType="TARGET"
                                >
                                  <MoneyInput
                                    onValueChange={[Function]}
                                    value="0.00"
                                  >
                                    <styled.input
                                      inputMode="numeric"
                                      onChange={[Function]}
                                      type="text"
                                      value="0.00"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-htpNat",
                                              "isStatic": true,
                                              "lastClassName": "gJNEJX",
                                              "rules": Array [
                                                "
  font-size: inherit;
  color: inherit;
  background: #FFFFFF33;
  border: 0;
  margin-left: 5px;
  margin-right: 5px;
  padding: 10px;
  flex: 1;
",
                                              ],
                                            },
                                            "displayName": "styled.input",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-htpNat",
                                            "target": "input",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        inputMode="numeric"
                                        onChange={[Function]}
                                        type="text"
                                        value="0.00"
                                      >
                                        <input
                                          className="sc-htpNat gJNEJX"
                                          inputMode="numeric"
                                          onChange={[Function]}
                                          type="text"
                                          value="0.00"
                                        />
                                      </StyledComponent>
                                    </styled.input>
                                  </MoneyInput>
                                </CurrencyAwareMoneyInput>
                                <CurrencySelector
                                  currencyType="TARGET"
                                >
                                  <CurrencySelector
                                    currencies={
                                      Array [
                                        "PLN",
                                        "EUR",
                                      ]
                                    }
                                    currency="PLN"
                                    onChange={[Function]}
                                  >
                                    <styled.select
                                      onChange={[Function]}
                                      value="PLN"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bdVaJa",
                                              "isStatic": true,
                                              "lastClassName": "bwiEOO",
                                              "rules": Array [
                                                "
  font-size: inherit;
  color: inherit;
  background: #FFFFFF33;
  border: 0;
  margin-left: 5px;
  margin-right: 5px;
",
                                              ],
                                            },
                                            "displayName": "styled.select",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bdVaJa",
                                            "target": "select",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onChange={[Function]}
                                        value="PLN"
                                      >
                                        <select
                                          className="sc-bdVaJa bwiEOO"
                                          onChange={[Function]}
                                          value="PLN"
                                        >
                                          <option
                                            key="PLN"
                                            value="PLN"
                                          >
                                            PLN
                                          </option>
                                          <option
                                            key="EUR"
                                            value="EUR"
                                          >
                                            EUR
                                          </option>
                                        </select>
                                      </StyledComponent>
                                    </styled.select>
                                  </CurrencySelector>
                                </CurrencySelector>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jTzLTM",
                                    "isStatic": true,
                                    "lastClassName": "jZthzA",
                                    "rules": Array [
                                      "
  display: flex;
  align-content: flex-end;
  flex-direction: column;
  position: relative;
  line-height: 1em;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jTzLTM",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jTzLTM jZthzA"
                              >
                                <ExchangeButton>
                                  <Button
                                    disabled={true}
                                    onClick={[Function]}
                                  >
                                    <styled.button
                                      disabled={true}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <StyledComponent
                                        disabled={true}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bwzfXH",
                                              "isStatic": false,
                                              "lastClassName": "hCaox",
                                              "rules": Array [
                                                "
  box-shadow: 2px 4px 10px 0px #0000004f;
  padding: 10px 20px;
  display: inline-flex;
  justify-content: space-between;
  align-items: center;
  font-size: 1em;
  margin: 10px auto;
  transition: 50ms transform linear;
  position: relative;

  & > svg {
    margin-left: 10px;
  }

  ",
                                                [Function],
                                                "

  &:hover {
    cursor: pointer;
  }

  &:active {
    transform: scale(0.95);
  }
",
                                              ],
                                            },
                                            "displayName": "styled.button",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bwzfXH",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="sc-bwzfXH hCaox"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Echange 
                                          <TrendingUp
                                            color="currentColor"
                                            size="24"
                                          >
                                            <svg
                                              fill="none"
                                              height="24"
                                              stroke="currentColor"
                                              strokeLinecap="round"
                                              strokeLinejoin="round"
                                              strokeWidth="2"
                                              viewBox="0 0 24 24"
                                              width="24"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <polyline
                                                points="23 6 13.5 15.5 8.5 10.5 1 18"
                                              />
                                              <polyline
                                                points="17 6 23 6 23 12"
                                              />
                                            </svg>
                                          </TrendingUp>
                                        </button>
                                      </StyledComponent>
                                    </styled.button>
                                  </Button>
                                </ExchangeButton>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </MainLayout>
  </App>
</Provider>
`;

exports[`should render loading state 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    <Loader>
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": true,
                "lastClassName": "frJinh",
                "rules": Array [
                  "
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-bxivhb frJinh"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": true,
                      "lastClassName": "jLWndV",
                      "rules": Array [
                        "
  animation: ",
                        Keyframes {
                          "id": "sc-keyframes-iVXCSc",
                          "inject": [Function],
                          "name": "iVXCSc",
                          "rules": Array [
                            "@-webkit-keyframes iVXCSc{from{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}to{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                            "@keyframes iVXCSc{from{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}to{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                          ],
                          "toString": [Function],
                        },
                        " 2s linear infinite;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-ifAKCX jLWndV"
                >
                  <Loader
                    color="currentColor"
                    size={32}
                  >
                    <svg
                      fill="none"
                      height={32}
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      viewBox="0 0 24 24"
                      width={32}
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <line
                        x1="12"
                        x2="12"
                        y1="2"
                        y2="6"
                      />
                      <line
                        x1="12"
                        x2="12"
                        y1="18"
                        y2="22"
                      />
                      <line
                        x1="4.93"
                        x2="7.76"
                        y1="4.93"
                        y2="7.76"
                      />
                      <line
                        x1="16.24"
                        x2="19.07"
                        y1="16.24"
                        y2="19.07"
                      />
                      <line
                        x1="2"
                        x2="6"
                        y1="12"
                        y2="12"
                      />
                      <line
                        x1="18"
                        x2="22"
                        y1="12"
                        y2="12"
                      />
                      <line
                        x1="4.93"
                        x2="7.76"
                        y1="19.07"
                        y2="16.24"
                      />
                      <line
                        x1="16.24"
                        x2="19.07"
                        y1="7.76"
                        y2="4.93"
                      />
                    </svg>
                  </Loader>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.span>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-EHOje",
                      "isStatic": true,
                      "lastClassName": "eSNhqD",
                      "rules": Array [
                        "
  margin-left: 10px;
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-EHOje",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="sc-EHOje eSNhqD"
                >
                  Loading...
                </span>
              </StyledComponent>
            </styled.span>
          </div>
        </StyledComponent>
      </styled.div>
    </Loader>
  </App>
</Provider>
`;
